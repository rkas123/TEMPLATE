
//                                      Sieve

int N=200005;    //Set the number of elements
bool sieve[200005];

void makeSieve()
{
    for(int i=0;i<N;i++)
    {
        if(i&1)
            sieve[i]=true;
        else
            sieve[i]=false;
    }
    sieve[1]=false;
    sieve[2]=true;
    for(int i=3;i*i<=N;i+=2)
    {
        if(sieve[i])
        {
            for(int j=i*i;j<=N;j+=(2*i))
                sieve[j]=false;
        }
    }
}

//                                      Fast Exponentiation 

int fastexp(int a,int b)
{
    int ans=1;
    int temp=a;
    while(b>0)
    {
        if(b&1)
            ans*=(temp);
        temp*=temp;
        b>>=1;
    }
    return ans;

}




//                                      Fast Exponentiation with MOD

int fastexp(int a,int b)
{
    int ans=1;
    int temp=a;
    while(b>0)
    {
        if(b&1)
            ans=(ans*temp)%mod;
        temp=(temp*temp)%mod;
        b>>=1;
    }
    return ans;
}

//                                      NCR for small numbers

int ncr(int n,int r)
{
    r=min(r,n-r);
    int answer=1;
    for(int i=0;i<r;i++)
    {
        answer*=(n-i);
        answer/=(i+1);
    }
    return answer;
}






//                                      NCR

//Declare factorial and invfact in global

    factorial[0]=1ll;
    for(int i=1ll;i<N;i++)
    {
        factorial[i]=(factorial[i-1]*i)%mod;
    }

    invfact[N-1]=fastexp(factorial[N-1],mod-2);
    for(int i=N-2;i>=0;i--)
    {
        invfact[i]=invfact[i+1]*(i+1);
        invfact[i]%=mod;
    }

    int ncr(int n, int r)
    {
        if(r>n)
            return 0ll;
        int num=factorial[n];
        num*=invfact[r];
        num%=mod;
        num*=invfact[n-r];
        num%=mod;
        return num;
    }





//                                  KMP Algorithm

int reset[100005];
void func()
{
    for(int i=0;i<100005;i++)
        reset[i]=-1;
}
void KMPpre(string pat)
{
    func();
    int i=0,j=1;
    reset[0]=-1;
    while(i<pat.length())
    {
        while(j>=0 && pat[i]!=pat[j])
        {
            j=reset[j];
        }
        i++;j++;
        reset[i]=j;
    }
}
void KMP(string str,string pat)
{
    KMPpre(pat);
    int i=0,j=0;
    while(i<str.size())
    {
        while(j>=0 && str[i]!=pat[j])
        {
            j=reset[j];
        }
        i++;j++;

        if(j==pat.length())
        {
            cout<<"Pattern found at "<<i-j<<endl;
            j=reset[j];
        }
    }
}


//                      Z function algorithm

    int n=str.length();
    int Z[n];
    int L=0,R=0;
    Z[0]=-1;
    for(int i=1;i<n;i++)
    {
        if(i>R)
        {
            L=R=i;
            while(R<n && str[R-L]==str[R])
            {
                R++;
            }
            Z[i]=R-L;
            R--;
        }
        else
        {
            int k=i-L;
            if(Z[k] < R-i+1)
                Z[i]=Z[k];
            else
            {
                L=i;
                while(R<n && str[R-L] == str[R])
                {
                    R++;
                }
                Z[i]=R-L;
                R--;
            }
        }
    }


//              Permutations Without Duplicate elements

set<string> perms;
void permute(string s,int l,int r)
{
    if(l==r)
    {
        perms.insert(s);
        return;
    }
    else
    {
        for(int i=l;i<=r;i++)
        {
            swap(s[l],s[i]);
            permute(s,l+1,r);
            swap(s[l],s[i]);
        }
    }
}


//                          ModInverse

// Possible only if a and m are coprime

int modI(int a, int m)
{
    int m0 = m, y = 0, x = 1;
    if (m == 1) return 0;
    while (a > 1)
    {
        int q = a / m;
        int t = m;
        m = a % m;
        a = t;
        t = y;
        y = x - q * y;
        x = t;
    }
    if (x < 0) x += m0;
    return x;
}


//                  Chinese Remainder Theorem

//Use the ModI function too

int crt(vector<pair<int, int>> v)  //number , remainder
{
    int ans = 0;
    int n = v.size();
    int m = 1;
    for (int i = 0; i < n; i++)
    {
        m *= v[i].first;
    }

    for (int i = 0; i < n; i++)
    {
        int t = 1;
        for (int j = 0; j < i; j++)
        {
            t *= (v[j].first);
            t *= modI(v[j].first, v[i].first);
            t %= m;
        }
        ans += (t * (v[i].second - ans + m)) % m;
        ans %= m;
    }
    return ans;
}


//                              Manacher's Algo

string longestPalin (string S)
{
    int N = S.length();
    if(N == 0)
        return "";
    N = 2*N + 1; //Position count
    int L[N]; //LPS Length Array
    L[0] = 0;
    L[1] = 1;
    int C = 1; //centerPosition 
    int R = 2; //centerRightPosition
    int i = 0; //currentRightPosition
    int iMirror; //currentLeftPosition
    int maxLPSLength = 0;
    int maxLPSCenterPosition = 0;
    int start = -1;
    int end = -1;
    int diff = -1;
      
    for (i = 2; i < N; i++) 
    {
        iMirror  = 2*C-i;
        L[i] = 0;
        diff = R - i;
        if(diff > 0)
            L[i] = min(L[iMirror], diff);
  
        while ( ((i + L[i]) < N && (i - L[i]) > 0) && ( ((i + L[i] + 1) % 2 == 0) || (S[(i + L[i] + 1)/2] == S[(i - L[i] - 1)/2] )))
        {
            L[i]++;
        }
  
        if (i + L[i] > R) 
        {
            C = i;
            R = i + L[i];
        }
    }
    int idex = -1;
    int most =-1;
    for(int i=0;i<N;i++)
    {
        if(L[i] > most)
        {
            most = L[i];
            idex=i;
        }
    }
    int st=(idex-most)/2;
    return S.substr(st,most);
}



